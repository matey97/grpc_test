// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc_test

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCTestClient is the client API for GRPCTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCTestClient interface {
	SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*ACK, error)
	GetMessagesTo(ctx context.Context, in *Person, opts ...grpc.CallOption) (GRPCTest_GetMessagesToClient, error)
	GetAllMessages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (GRPCTest_GetAllMessagesClient, error)
}

type gRPCTestClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCTestClient(cc grpc.ClientConnInterface) GRPCTestClient {
	return &gRPCTestClient{cc}
}

func (c *gRPCTestClient) SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*ACK, error) {
	out := new(ACK)
	err := c.cc.Invoke(ctx, "/grpc_test.GRPCTest/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCTestClient) GetMessagesTo(ctx context.Context, in *Person, opts ...grpc.CallOption) (GRPCTest_GetMessagesToClient, error) {
	stream, err := c.cc.NewStream(ctx, &GRPCTest_ServiceDesc.Streams[0], "/grpc_test.GRPCTest/GetMessagesTo", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCTestGetMessagesToClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCTest_GetMessagesToClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type gRPCTestGetMessagesToClient struct {
	grpc.ClientStream
}

func (x *gRPCTestGetMessagesToClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gRPCTestClient) GetAllMessages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (GRPCTest_GetAllMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &GRPCTest_ServiceDesc.Streams[1], "/grpc_test.GRPCTest/GetAllMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCTestGetAllMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GRPCTest_GetAllMessagesClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type gRPCTestGetAllMessagesClient struct {
	grpc.ClientStream
}

func (x *gRPCTestGetAllMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GRPCTestServer is the server API for GRPCTest service.
// All implementations must embed UnimplementedGRPCTestServer
// for forward compatibility
type GRPCTestServer interface {
	SendMessage(context.Context, *Message) (*ACK, error)
	GetMessagesTo(*Person, GRPCTest_GetMessagesToServer) error
	GetAllMessages(*emptypb.Empty, GRPCTest_GetAllMessagesServer) error
	mustEmbedUnimplementedGRPCTestServer()
}

// UnimplementedGRPCTestServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCTestServer struct {
}

func (UnimplementedGRPCTestServer) SendMessage(context.Context, *Message) (*ACK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedGRPCTestServer) GetMessagesTo(*Person, GRPCTest_GetMessagesToServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMessagesTo not implemented")
}
func (UnimplementedGRPCTestServer) GetAllMessages(*emptypb.Empty, GRPCTest_GetAllMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAllMessages not implemented")
}
func (UnimplementedGRPCTestServer) mustEmbedUnimplementedGRPCTestServer() {}

// UnsafeGRPCTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCTestServer will
// result in compilation errors.
type UnsafeGRPCTestServer interface {
	mustEmbedUnimplementedGRPCTestServer()
}

func RegisterGRPCTestServer(s grpc.ServiceRegistrar, srv GRPCTestServer) {
	s.RegisterService(&GRPCTest_ServiceDesc, srv)
}

func _GRPCTest_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCTestServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc_test.GRPCTest/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCTestServer).SendMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCTest_GetMessagesTo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Person)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCTestServer).GetMessagesTo(m, &gRPCTestGetMessagesToServer{stream})
}

type GRPCTest_GetMessagesToServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type gRPCTestGetMessagesToServer struct {
	grpc.ServerStream
}

func (x *gRPCTestGetMessagesToServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _GRPCTest_GetAllMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GRPCTestServer).GetAllMessages(m, &gRPCTestGetAllMessagesServer{stream})
}

type GRPCTest_GetAllMessagesServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type gRPCTestGetAllMessagesServer struct {
	grpc.ServerStream
}

func (x *gRPCTestGetAllMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// GRPCTest_ServiceDesc is the grpc.ServiceDesc for GRPCTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_test.GRPCTest",
	HandlerType: (*GRPCTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _GRPCTest_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMessagesTo",
			Handler:       _GRPCTest_GetMessagesTo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetAllMessages",
			Handler:       _GRPCTest_GetAllMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc_test/grpc_test.proto",
}
